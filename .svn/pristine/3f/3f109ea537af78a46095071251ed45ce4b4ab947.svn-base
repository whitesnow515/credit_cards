import '../style.css'
import * as THREE from "three";
import * as TWEEN from "@tweenjs/tween.js";
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

const COUNT = 5;
const scene = new THREE.Scene();
scene.background = new THREE.Color(0x0);

const el = document.querySelector("canvas");
const renderer = new THREE.WebGLRenderer({ antialias: true, canvas: el });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);


var axesHelper = new THREE.AxesHelper(5);
// scene.add(axesHelper);

// Camera
const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(0, 0, 1);
// camera.lookAt(new THREE.Vector3(0, 0, 0));

// const camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 0.1, 1000 );
// camera.position.set(0, 0, 0.2);
// camera.updateProjectionMatrix();


var controls = new OrbitControls( camera, renderer.domElement );

// Lights
const ambientLight = new THREE.DirectionalLight(0x0000ff);
ambientLight.position.set(-1, -1, -1).normalize();
scene.add(ambientLight);

const light = new THREE.HemisphereLight(0xffffff, 0x444444);
light.position.set(1, 1, 1);
scene.add(light);

// Materials
const materials = [];
const card_color_list = [0xff0000, 0x00ff00, 0x0000ff, 0x363636, 0xececec];
for (let i = 0; i < COUNT; i++) {
	let mat = new THREE.MeshStandardMaterial({ color: card_color_list[i % card_color_list.length] });
	materials.push(mat);
}

// init angle
const radius = 0.1;
const card_angle_list = [];
const start_angle = -90;
for (let i = 0; i < COUNT; i++) {
	card_angle_list[i] = start_angle + i * 36;
}


// Cards
const cards = [];
let pattern_credit;
// let angle = 0;
let x = 0;
let y = 0;
let z = 0;

new GLTFLoader().load('cards.glb', res => {

	pattern_credit = res.scene;
	let angle = 0;

	for (let i = 0; i < COUNT; i++) {
	
		let s = pattern_credit.clone();
		angle = card_angle_list[i];

		s.traverse(function(node) {
			if (node.isMesh) {
				node.material = materials[i];
			}
		});

		x = radius * Math.sin(angle * Math.PI / 180);
		z = radius * Math.cos(angle * Math.PI / 180);
		s.position.set(x, y, z);
		
		s.rotation.x = 0;
		s.rotation.y = (angle + 90 )* Math.PI / 180;
		s.rotation.z = 0;

		cards.push(s);
		scene.add(s);
	}

	// tweenTestModel();
	tweenModels();
});


let step_x = 0;
let step_y = 0;
let step_z = 0;

// Tween Models
function tweenModels() {

	const time = 100;
	let angle = 0;

	for (let i = 0; i < cards.length; i++) {

		const card = cards[i];
		angle = card_angle_list[i];

		step_x = radius * Math.sin(angle * Math.PI / 180);
		step_z = radius * Math.cos(angle * Math.PI / 180);

		new TWEEN.Tween(card.position)
			.to({x:step_x, y:step_y, z:step_z}, time)
			.easing(TWEEN.Easing.Quadratic.InOut)
			.start();

		new TWEEN.Tween(card.rotation)
			.to({x:0, y:(angle + 90 )* Math.PI / 180, z:0}, time)
			.easing(TWEEN.Easing.Quadratic.InOut)
			.start();

		// card.rotation.y = (angle + 90 )* Math.PI / 180;

		if(card_angle_list[i] % 360 == 90) card_angle_list[i] += 180;
		card_angle_list[i] += 3;

		// card_angle_list[i] = card_angle_list[i] % 360;
	}

	setTimeout(() => {
		tweenModels();
	}, time);

}

// Animate
const animate = (time) => {
	// camera.position.set(
	// 	Math.sin(time / 3000) * 1000,
	// 	20,
	// 	Math.cos(time / 3000) * 1000
	// );
	// camera.lookAt(new THREE.Vector3(0, 0, 0));

	TWEEN.update();
	renderer.render(scene, camera);
	requestAnimationFrame(animate);
};
animate();

// const render = () => {
// 	requestAnimationFrame(render);
// 	controls.update();
// 	renderer.render(scene, camera);
// }

// render();


// Resize
// const resize = () => {
//   renderer.setSize(window.innerWidth, window.innerHeight);
//   camera.aspect = window.innerWidth / window.innerHeight;
//   camera.updateProjectionMatrix();
// };

// window.addEventListener("resize", resize);
