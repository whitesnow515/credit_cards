import '../style.css'
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import Stats from "three/examples/jsm/libs/stats.module";
import * as TWEEN from "@tweenjs/tween.js";
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { setupCounter } from './counter.js'

let renderer, camera, scene, controls, stats;

var gltfScene;
const init = () => {

	renderer = new THREE.WebGLRenderer( { antialias: true } );
	renderer.setPixelRatio( window.devicePixelRatio );
	renderer.setSize( window.innerWidth, window.innerHeight );
	renderer.outputColorSpace = THREE.SRGBColorSpace;
	renderer.setClearColor(0xffffff, 1);
	renderer.physicallyCorrectLights = true //deprecated
	renderer.useLegacyLights = false //use this instead of setting physicallyCorrectLights=true property
	renderer.shadowMap.enabled = true
	renderer.outputEncoding = THREE.sRGBEncoding
	document.body.appendChild( renderer.domElement );
  
	scene = new THREE.Scene();
	scene.add(new THREE.AxesHelper(5))
	const color = 0x19ffff
	const intensity = 1
	const light = new THREE.DirectionalLight(color, intensity)
	light.position.set(0, 10, 5)
	light.target.position.set(-5, 0, 0)
	scene.add(light)
	scene.add(light.target)
	const light2 = new THREE.DirectionalLight(color, intensity)
	light2.position.set(0, 10, -5)
	light2.target.position.set(-5, 0, 0)
	scene.add(light2)
	scene.add(light2.target)
	
	camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.1, 1000 );
	camera.position.set(0, 0, 0.2);
	camera.updateProjectionMatrix();
	
	// stats setup
	stats = new Stats();
	document.body.appendChild( stats.dom );
  
	new GLTFLoader().load('cards.glb', res => {
		gltfScene = res.scene;

		gltfScene.position.set(0, 0, 0);
		// gltfScene.setClearColor(0x00ff00, 0.8);

		scene.add(gltfScene);
		console.log(scene);
	});
}

var x = 0;
var y = 0;
var initial = { x: 0, y: 0, z: 0, rot: 0 }
var final = { x: 0.03, y: 15, z: 0.03, rot: 2 * Math.PI }

var tween = new TWEEN.Tween(initial)
tween.to(final)

tween.easing(TWEEN.Easing.generatePow(0.75).InOut)

tween.repeat(Infinity)
tween.delay(500)
// tween.interpolation.
tween.yoyo(false)
tween.start()

const render = () => {

	requestAnimationFrame(render)
	TWEEN.update()
	// y += 0.01;
	// x += 0.0003;
	// console.log('x-->>', y%2);
	// gltfScene.rotation.set(0, y, 0);
	// gltfScene.position.set(x, 0, 0);
	console.log('x-->>', initial.rot)
	for (let i = 0; i < scene.children.length; i++) {
		// cx = scene.children[i].rotation.x;
		// cy = scene.children[i].rotation.y;
		// scene.children[i].rotation.x++;
		scene.children[i].rotation.y = initial.rot;
		// // scene.children[i].rotation.y++;
		// const c = Math.cos( 1 ), s = Math.sin( 1 );

		// const x = cx - 0;
		// const y = cy - 0;

		// cx = x * c - y * s + 0;
		// cy = x * s + y * c + 0;
	}
	// gltfScene.rotation.set(0, initial.rot, 0)
	// gltfScene.position.set(initial.x, 0 , initial.z)
	renderer.render(scene, camera)
}
  
init();
render();
