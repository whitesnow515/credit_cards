import '../style.css'
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import Stats from "three/examples/jsm/libs/stats.module";
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

let renderer, camera, scene, controls, stats;
var gltfScene;


const init = () => {

	renderer = new THREE.WebGLRenderer( { antialias: true } );
	renderer.setPixelRatio( window.devicePixelRatio );
	renderer.setSize( window.innerWidth, window.innerHeight );
	renderer.outputColorSpace = THREE.SRGBColorSpace;
	renderer.setClearColor(0x000000, 1);
	document.body.appendChild( renderer.domElement );
  
	scene = new THREE.Scene();
  
	const color = 0xffffff
	const intensity = 1
	
	const light = new THREE.DirectionalLight(color, intensity)
	light.position.set(0, 10, 5)
	light.target.position.set(0, 0, 0)
	scene.add(light)
	scene.add(light.target)


	const light2 = new THREE.DirectionalLight(color, intensity)
	light2.position.set(0, 10, -5)
	light2.target.position.set(-5, 0, 0)
	scene.add(light2)
	scene.add(light2.target)
	
	camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 0.1, 1000 );
	camera.position.set(0, 0, 0.2);
	camera.updateProjectionMatrix();
	
	// scene.add(camera);

	// controls = new OrbitControls( camera, renderer.domElement );
	
	// stats setup
	stats = new Stats();
	document.body.appendChild( stats.dom );
  
	new GLTFLoader().load('cards.glb', res => {
		
		const material = new THREE.MeshStandardMaterial({ 
			color: 0xff0000 ,
			shading: THREE.FlatShading
		});
		

		gltfScene = res.scene;
		gltfScene.position.set(0, 0, 0);
		gltfScene.traverse(function(node) {
			if (node.isMesh) {
				node.material = material;
			}
		});

		// gltfScene.setClearColor(0x00ff00, 0.8);

		// for ( var i = 0; i < 5; i ++ ) {
		// 	console.log(i);
		// 	var newObj = gltfScene.clone();
		// 	// make sure to re position to be able to see the new queen!
		// 	newObj.position.set(0,0,5*i);
		// 	scene.add(newObj);
		// }

		// var newObj1 = gltfScene.clone();
		// newObj1.position.set(0,0,0);
		// scene.add(newObj1);

		// var newObj2 = gltfScene.clone();
		// newObj2.position.set(0,0,0);	
		// newObj2.rotateY(30);
		// scene.add(newObj2);

		// var newObj3 = gltfScene.clone();
		// newObj3.position.set(0,0,0);	
		// newObj3.rotateY(-30);
		// scene.add(newObj3);

		// var newObj4 = gltfScene.clone();
		// newObj4.position.set(0,0,0);	
		// newObj4.rotateY(60);
		// scene.add(newObj4);

		// var newObj5 = gltfScene.clone();
		// newObj5.position.set(0,0,0);	
		// newObj5.rotateY(-60);
		// scene.add(newObj5);

	});
}


let x = 0;

const render = () => {

	stats.update();
	requestAnimationFrame(render);
  
	x += 0.01;
	gltfScene.position.set(x, 0, 0);

	// controls.update();
  
	renderer.render(scene, camera);
}
  
init();
render();
